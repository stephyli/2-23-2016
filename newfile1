<!DOCTYPE html>
<html>
<head>
<title>Page Title</title>
<style>

.circleContainer{
  display:inline-block;
   background:orange;
    width: 200px;
    height:200px;
    position:relative;

}

.circle{
  display:inline-block;
   background:black;
    width: 200px;
    border-radius: 150px;
    height:200px;
    position:absolute;
    -webkit-transform: rotate(50deg);
}
.pointer{
  width:10px;
  height:100px;
  position:absolute;
  background:green;
  top:100px;
  left:95px;

}
.faderHoriz{
  display:inline-block;
  width:200px;
  height:100px;
  position:relative;
  background:black;
  margin:50px;
}
.grooveHoriz{
  width:160px;
  height:10px;
  position:absolute;
  background:green;
  top:45px;
  left:20px;
}
.faderVert{
  display:inline-block;
  width:40px;
  height:200px;
  position:relative;
  background:black;
  margin:50px;

}
.grooveVert{
  width:10px;
  height:160px;
  position:absolute;
  background:green;
  top:20px;
  left:15px;
}
.capHoriz{
  width:40px;
  height:100px;
  position:absolute;
  background:red;
}
.capVert{
  width:40px;
  height:30px;
  position:absolute;
  background:red;
}
</style>
</head>
<body>
	<div id ="circleContainer" class="circleContainer">

	<div class="circle" id ="circle" onmousedown="circleDown(event)"> 
<div class="pointer"> </div>
	</div>
</div>
<div vc-fader class= "faderHoriz" vc-id="fader/1">
<div vc-fader1groove class="grooveHoriz"></div>
  <div vc-fader-cap class="capHoriz" onmousedown="vcControl.faderCapDown(event)"></div>
</div>
<div vc-fader class= "faderVert" vc-id="fader/2">
<div vc-fader1groove class="grooveVert"></div>
  <div vc-fader-cap class="capVert"onmousedown="vcControl.faderCapDown(event)"></div>
</div>
<div vc-fader  class= "faderVert" vc-id="fader/3">
<div vc-fader1groove class="grooveVert"></div>
  <div vc-fader-cap class="capVert"onmousedown="vcControl.faderCapDown(event)"></div>
</div>
<div vc-fader class= "faderVert" vc-id="fader/4">
<div vc-fader1groove class="grooveVert"></div>
  <div vc-fader-cap class="capVert"onmousedown="vcControl.faderCapDown(event)"></div>
</div>

<script>
vcControl = function () {
  function faderCapDown(event)
  {
    //fadercap via onmousedown event
    var faderCap =  event.target;
    document.addEventListener("mousemove", faderCapMove);
    document.addEventListener("mouseup", faderCapUp);
    //x,y coordinates for onmousedown event
    var mouseDownX=event.clientX;
    var mouseDownY=event.clientY;
    //positions of fadercap during mousedown event
    var mouseDownFaderCapRect= faderCap.getBoundingClientRect();
    var mouseDownFaderCapLeft=mouseDownFaderCapRect.left;
    var mouseDownFaderCapTop=mouseDownFaderCapRect.top;
    //parent element
    var fader1 = faderCap.parentElement;
    //positions of static parent element
    var fader1Rect= fader1.getBoundingClientRect();
    var fader1Top = fader1Rect.top;
    var fader1Left = fader1Rect.left;
    var faderParentHeight=fader1Rect.height;
    var faderParentWidth=fader1Rect.width;
    //positions of fadercap during movemove event
    var faderCapRect= faderCap.getBoundingClientRect();
   function faderCapMove(event){
//x,y coordinates for mousemove event
     var mouseMoveX=event.clientX;
     var mouseMoveY=event.clientY;
     //current change [endpoint(mousemove)-beginning(mousedown)]
     var changeX=mouseMoveX-mouseDownX;
     var changeY=mouseMoveY-mouseDownY;
     //distance of fadercap during mousedown from parent element(initial mousedown)
     var faderCapRelativeToFader1X=mouseDownFaderCapLeft-fader1Left;
     var faderCapRelativeToFader1Y=mouseDownFaderCapTop-fader1Top;
     //initial(mousedown)+current change(mousemove)
     var outputX=faderCapRelativeToFader1X+changeX;
     var outputY=faderCapRelativeToFader1Y+changeY;
     //if width of parent element is greater than it's height, execute the following
     if ( faderParentWidth>faderParentHeight ){
     // do not let fadercap move past below parent element
     if (outputX> (fader1Rect.width-faderCapRect.width)){
     faderCap.style.left = (fader1Rect.width-faderCapRect.width)+ "px";
     //do not let fadercap move past above parent element
    } else if  (outputX < 0) {
      faderCap.style.left = 0;
    //allow fadercap to move within parent element
      }else {
      faderCap.style.left = outputX+"px";
      }
    }
      //if width of parent element is not greater than it's height, execute the following
      else if (outputY  > (fader1Rect.height-faderCapRect.height)){
      faderCap.style.top = (fader1Rect.height-faderCapRect.height)+ "px";
    } else if  (outputY < 0) {
      faderCap.style.top = 0;
      }else {
      faderCap.style.top = outputY+"px";
      }
    }
    function faderCapUp(event){
      // detect that mouse is not down
      document.removeEventListener("mousemove", faderCapMove);
      document.removeEventListener("mouseup", faderCapUp);
    }
  }
  function addTargetActionForControlEvents(element, callback)
  {
  }
    return {
    // Public methods and variables
    faderCapDown: faderCapDown,
    addTargetActionForControlEvents: addTargetActionForControlEvents
  };
}();
/*
vcController = function () {
    // Private methods and variables
    var vcModelListeners = {};
    function setFaderCapPosition(element, value)
    {
    }
    function faderCapTouch(event)
    {
      var fadercap =  event.target;
      // detect that mouse is down
      document.addEventListener("mousemove", faderCapMove);
      document.addEventListener("mouseup", faderCapRelease);
      function faderCapMove(event){
        //if mouse moves below "fader1" set at bottom, if above, set at 0
        // if mouse is down, position the cap to where the mouse has moved to
        var fader1 = fadercap.parentElement;
        var fader1rect= fader1.getBoundingClientRect();
        var fadercaprect= fadercap.getBoundingClientRect();
        var top = fader1rect.top;
        var y = event.clientY-top;
        if (y > (fader1rect.height-fadercaprect.height)){
        fadercap.style.top = (fader1rect.height-fadercaprect.height)+ "px";
        } else if  (y < 0) {
        fadercap.style.top = 0;
        }else {
        fadercap.style.top = y+"px";
        }
      }
      function faderCapRelease(event){
        // detect that mouse is not down
        document.removeEventListener("mousemove", faderCapMove);
        document.removeEventListener("mouseup", faderCapRelease);
      }
    }
    function updateFader(event)
    {
      // move fader cap.
    }
    function updateControl(event)
    {
      if (event.type != "updateControl")
        return;
      var detail = event.detail;
      if (!detail) return;
      var listeners = vcModelListeners[detail.id];
      if (listeners)
      {
        for (var i=0; i<listeners.length; i++)
        {
        }
      }
    }
    function addControlListener(element, id)
    {
      if (!vcModelListeners[id])
      {
        vcModelListeners[id] = [];
      }
      vcModelListeners[id].push(element);
    }
    // init can be called to set up existing DOM elements automatically.
    function init()
    {
      // set all fader cap elements to listen for mouse down
      var faderCaps = document.querySelectorAll("[vc-fader-cap]");
      for (var i=0; i<faderCaps.length; i++)
      {
        faderCaps[i].addEventListener("mousedown", faderCapTouch);
      }
      // get all elements with vc-id attribute
      // and store a mapping
      var controls = document.querySelectorAll("[vc-id]");
      for (var i=0; i<controls.length; i++)
      {
        var vcId = controls[i].getAttribute("vc-id");
        if (vcId)
          addControlListener(controls[i], vcId);
      }
      // start listening for updates
      document.addEventListener("vcontrolUpdate", updateControl);
    }
  return {
    // Public methods and variables
    init: init,                   // use this to automatically setup controls
    faderCapTouch: faderCapTouch, // use this to handle mouse down or touch events
    updateFader: updateFader,     // use this to send an event to update a fader.
    updateControl: updateControl, // use this to receive control metadata update events
  };
}();
*/
function circleDown(event)
{
   //pointer via onmousedown event
   var circle = document.getElementById("circle");
   var circleContainer = document.getElementById("circleContainer");
   document.addEventListener("mousemove", circleMove);
   document.addEventListener("mouseup", circleUp);
   //x,y coordinates for onmousedown event
   var mouseDownY=event.clientY+50;
   var circleContainerRect= circleContainer.getBoundingClientRect();
   console.log(circleContainerRect);
   var mouseDownYrect=mouseDownY-circleContainerRect.top;
  
   function circleMove(event)
   {
      //x,y coordinates for mousemove event
      var mouseMoveY=event.clientY; 
      var mouseMoveYrect=mouseMoveY-circleContainerRect.top;
      //current change [endpoint(mousemove)-beginning(mousedown)]
      var changeY=mouseMoveYrect-mouseDownYrect;      
      //if change is greater than 50 deg and less than 310 deg,      execute rotational movement  
     //if mouse moves down, decrease rotation to the left
     if (mouseMoveY>mouseDownY)
     {
        circle.style.WebkitTransform = "rotate ("+(changeY)+"deg)"; 
     }
     //if mouse moves up, increase rotation to the right
     else if (mouseMoveY<mouseDownY)
     {
        circle.style.WebkitTransform = "rotate("+(-changeY)+"deg)"; 
     }
   }
    
  function circleUp(event)
  {
     // detect that mouse is not down
     document.removeEventListener("mousemove",circleMove);
     document.removeEventListener("mouseup", circleUp);
  }
 } 
</script>

</body>
</html>
